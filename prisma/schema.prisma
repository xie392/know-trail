// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model RefreshToken {
    id        String   @id @default(cuid())
    token     String   @unique @default(cuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    expires   DateTime
    createdAt DateTime @default(now())
}

model DeviceInfo {
    id           String   @id @default(cuid())
    userId       String
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    fingerprint  String // 设备指纹
    userAgent    String // 浏览器信息
    lastIp       String // 最后登录IP
    lastLocation String? // 最后登录地理位置
    isBlocked    Boolean  @default(false)
    lastLoginAt  DateTime @default(now())
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    @@unique([userId, fingerprint])
}

model LoginAttempt {
    id        String   @id @default(cuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    ip        String
    location  String?
    userAgent String
    status    String // SUCCESS, FAILED, BLOCKED
    createdAt DateTime @default(now())
}

model BlockedToken {
    id        String   @id @default(cuid())
    token     String   @unique
    reason    String
    expiresAt DateTime
    createdAt DateTime @default(now())
}

// other
model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    password      String?
    role          String         @default("USER")
    bio           String? // 用户简介
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    accounts      Account[]
    sessions      Session[]
    comments      Comment[]
    refreshTokens RefreshToken[]
    deviceInfos   DeviceInfo[]
    loginAttempt  LoginAttempt[]
    teams         TeamMember[]
    documents     Document[]
}

model Document {
    id         String   @id @default(cuid())
    title      String
    content    String   @default("")
    visibility String   @default("PUBLIC") // 文档可见性 (PUBLIC, PRIVATE, TEAM)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    // 关系
    authorId String
    author   User          @relation(fields: [authorId], references: [id])
    teamId   String?
    team     Team?         @relation(fields: [teamId], references: [id])
    tags     DocumentTag[]
    comments Comment[]

    // 自引用字段
    parentId String? // 父文档的 ID
    parent   Document?  @relation("ParentChild", fields: [parentId], references: [id])
    children Document[] @relation("ParentChild")

    // 排序字段 (用于前端自定义排序)
    order Int @default(0)
}

// 团队表
model Team {
    id        String   @id @default(cuid())
    name      String
    logo      String? // 团队图标
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // 关系
    members   TeamMember[]
    documents Document[]
}

// 团队成员表 (中间表，关联用户和团队)
model TeamMember {
    id        String   @id @default(cuid())
    userId    String
    teamId    String
    role      String   @default("MEMBER") // 成员角色 (OWNER, ADMIN, MEMBER)
    createdAt DateTime @default(now())

    // 关系
    user User @relation(fields: [userId], references: [id])
    team Team @relation(fields: [teamId], references: [id])
}

// 文档标签表 (中间表)
model DocumentTag {
    id         String @id @default(cuid())
    documentId String
    tagId      String

    // 关系
    document Document @relation(fields: [documentId], references: [id])
    tag      Tag      @relation(fields: [tagId], references: [id])
}

// 标签表
model Tag {
    id        String   @id @default(cuid())
    name      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // 关系
    documents DocumentTag[]
}

// 评论表
model Comment {
    id         String   @id @default(cuid())
    content    String
    createdAt  DateTime @default(now())
    authorId   String
    documentId String

    // 关系
    author   User     @relation(fields: [authorId], references: [id])
    document Document @relation(fields: [documentId], references: [id])
}
